###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Dict, List, Optional, TypeVar, Union, cast
from typing_extensions import Literal

import baml_py

from . import _baml
from ._baml import BamlCallOptions
from .types import Checked, Check
from .parser import LlmResponseParser, LlmStreamParser
from .async_request import AsyncHttpRequest, AsyncHttpStreamRequest
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME


OutputType = TypeVar('OutputType')


class BamlAsyncClient:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager
    __stream_client: "BamlStreamClient"
    __http_request: AsyncHttpRequest
    __http_stream_request: AsyncHttpStreamRequest
    __llm_response_parser: LlmResponseParser
    __llm_stream_parser: LlmStreamParser
    __baml_options: _baml.BamlCallOptions

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager, baml_options: Optional[_baml.BamlCallOptions] = None):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager
      self.__stream_client = BamlStreamClient(self.__runtime, self.__ctx_manager, baml_options)
      self.__http_request = AsyncHttpRequest(self.__runtime, self.__ctx_manager)
      self.__http_stream_request = AsyncHttpStreamRequest(self.__runtime, self.__ctx_manager)
      self.__llm_response_parser = LlmResponseParser(self.__runtime, self.__ctx_manager)
      self.__llm_stream_parser = LlmStreamParser(self.__runtime, self.__ctx_manager)
      self.__baml_options = baml_options or {}

    def with_options(
      self,
      tb: Optional[_baml.type_builder.TypeBuilder] = None,
      client_registry: Optional[baml_py.baml_py.ClientRegistry] = None,
      collector: Optional[Union[baml_py.baml_py.Collector, List[baml_py.baml_py.Collector]]] = None,
      env: Optional[Dict[str, Optional[str]]] = None,
    ) -> "BamlAsyncClient":
      """
      Returns a new instance of BamlAsyncClient with explicitly typed baml options
      for Python 3.8 compatibility.
      """
      new_options = self.__baml_options.copy()

      # Override if any keyword arguments were provided.
      if tb is not None:
          new_options["tb"] = tb
      if client_registry is not None:
          new_options["client_registry"] = client_registry
      if collector is not None:
          new_options["collector"] = collector
      if env is not None:
          new_options["env"] = env

      return BamlAsyncClient(self.__runtime, self.__ctx_manager, new_options)

    @property
    def stream(self):
      return self.__stream_client

    @property
    def request(self):
      return self.__http_request

    @property
    def stream_request(self):
      return self.__http_stream_request

    @property
    def parse(self):
      return self.__llm_response_parser

    @property
    def parse_stream(self):
      return self.__llm_stream_parser

    
    async def CalculateSimilarity(
        self,
        hypothesis1: _baml.types.Hypothesis,hypothesis2: _baml.types.Hypothesis,similarity_aspects: List[str],
        baml_options: _baml.BamlCallOptions = {},
    ) -> _baml.types.SimilarityScore:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = await self.__runtime.call_function(
        "CalculateSimilarity",
        {
          "hypothesis1": hypothesis1,"hypothesis2": hypothesis2,"similarity_aspects": similarity_aspects,
        },
        self.__ctx_manager.clone_context(),
        tb,
        __cr__,
        collectors,
        env,
      )
      return cast(_baml.types.SimilarityScore, raw.cast_to(_baml.types, _baml.types, _baml.partial_types, False))
    
    async def CompareHypotheses(
        self,
        hypothesis1: _baml.types.Hypothesis,hypothesis2: _baml.types.Hypothesis,comparison_criteria: List[str],debate_context: Optional[str],
        baml_options: _baml.BamlCallOptions = {},
    ) -> _baml.types.ComparisonResult:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = await self.__runtime.call_function(
        "CompareHypotheses",
        {
          "hypothesis1": hypothesis1,"hypothesis2": hypothesis2,"comparison_criteria": comparison_criteria,"debate_context": debate_context,
        },
        self.__ctx_manager.clone_context(),
        tb,
        __cr__,
        collectors,
        env,
      )
      return cast(_baml.types.ComparisonResult, raw.cast_to(_baml.types, _baml.types, _baml.partial_types, False))
    
    async def EnhanceHypothesis(
        self,
        original_hypothesis: _baml.types.Hypothesis,enhancement_strategy: str,feedback: Optional[List[str]],complementary_hypothesis: Optional[_baml.types.Hypothesis],
        baml_options: _baml.BamlCallOptions = {},
    ) -> _baml.types.Hypothesis:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = await self.__runtime.call_function(
        "EnhanceHypothesis",
        {
          "original_hypothesis": original_hypothesis,"enhancement_strategy": enhancement_strategy,"feedback": feedback,"complementary_hypothesis": complementary_hypothesis,
        },
        self.__ctx_manager.clone_context(),
        tb,
        __cr__,
        collectors,
        env,
      )
      return cast(_baml.types.Hypothesis, raw.cast_to(_baml.types, _baml.types, _baml.partial_types, False))
    
    async def EvaluateHypothesis(
        self,
        hypothesis: _baml.types.Hypothesis,review_type: _baml.types.ReviewType,evaluation_criteria: List[str],context: Optional[Dict[str, str]],
        baml_options: _baml.BamlCallOptions = {},
    ) -> _baml.types.Review:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = await self.__runtime.call_function(
        "EvaluateHypothesis",
        {
          "hypothesis": hypothesis,"review_type": review_type,"evaluation_criteria": evaluation_criteria,"context": context,
        },
        self.__ctx_manager.clone_context(),
        tb,
        __cr__,
        collectors,
        env,
      )
      return cast(_baml.types.Review, raw.cast_to(_baml.types, _baml.types, _baml.partial_types, False))
    
    async def ExtractResearchPatterns(
        self,
        hypotheses: List[_baml.types.Hypothesis],reviews: List[_baml.types.Review],focus: str,
        baml_options: _baml.BamlCallOptions = {},
    ) -> _baml.types.ResearchPatterns:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = await self.__runtime.call_function(
        "ExtractResearchPatterns",
        {
          "hypotheses": hypotheses,"reviews": reviews,"focus": focus,
        },
        self.__ctx_manager.clone_context(),
        tb,
        __cr__,
        collectors,
        env,
      )
      return cast(_baml.types.ResearchPatterns, raw.cast_to(_baml.types, _baml.types, _baml.partial_types, False))
    
    async def GenerateHypothesis(
        self,
        goal: str,constraints: List[str],existing_hypotheses: List[_baml.types.Hypothesis],focus_area: Optional[str],generation_method: str,
        baml_options: _baml.BamlCallOptions = {},
    ) -> _baml.types.Hypothesis:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = await self.__runtime.call_function(
        "GenerateHypothesis",
        {
          "goal": goal,"constraints": constraints,"existing_hypotheses": existing_hypotheses,"focus_area": focus_area,"generation_method": generation_method,
        },
        self.__ctx_manager.clone_context(),
        tb,
        __cr__,
        collectors,
        env,
      )
      return cast(_baml.types.Hypothesis, raw.cast_to(_baml.types, _baml.types, _baml.partial_types, False))
    
    async def ParseResearchGoal(
        self,
        natural_language_goal: str,domain_context: Optional[str],
        baml_options: _baml.BamlCallOptions = {},
    ) -> _baml.types.ParsedResearchGoal:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = await self.__runtime.call_function(
        "ParseResearchGoal",
        {
          "natural_language_goal": natural_language_goal,"domain_context": domain_context,
        },
        self.__ctx_manager.clone_context(),
        tb,
        __cr__,
        collectors,
        env,
      )
      return cast(_baml.types.ParsedResearchGoal, raw.cast_to(_baml.types, _baml.types, _baml.partial_types, False))
    
    async def PerformSafetyCheck(
        self,
        target_type: str,target_content: str,trust_level: str,safety_criteria: List[str],
        baml_options: _baml.BamlCallOptions = {},
    ) -> _baml.types.SafetyCheck:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = await self.__runtime.call_function(
        "PerformSafetyCheck",
        {
          "target_type": target_type,"target_content": target_content,"trust_level": trust_level,"safety_criteria": safety_criteria,
        },
        self.__ctx_manager.clone_context(),
        tb,
        __cr__,
        collectors,
        env,
      )
      return cast(_baml.types.SafetyCheck, raw.cast_to(_baml.types, _baml.types, _baml.partial_types, False))
    


class BamlStreamClient:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager
    __baml_options: _baml.BamlCallOptions
    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager, baml_options: Optional[_baml.BamlCallOptions] = None):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager
      self.__baml_options = baml_options or {}

    
    def CalculateSimilarity(
        self,
        hypothesis1: _baml.types.Hypothesis,hypothesis2: _baml.types.Hypothesis,similarity_aspects: List[str],
        baml_options: _baml.BamlCallOptions = {},
    ) -> baml_py.BamlStream[_baml.partial_types.SimilarityScore, _baml.types.SimilarityScore]:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = self.__runtime.stream_function(
        "CalculateSimilarity",
        {
          "hypothesis1": hypothesis1,
          "hypothesis2": hypothesis2,
          "similarity_aspects": similarity_aspects,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
        env,
      )

      return baml_py.BamlStream[_baml.partial_types.SimilarityScore, _baml.types.SimilarityScore](
        raw,
        lambda x: cast(_baml.partial_types.SimilarityScore, x.cast_to(_baml.types, _baml.types, _baml.partial_types, True)),
        lambda x: cast(_baml.types.SimilarityScore, x.cast_to(_baml.types, _baml.types, _baml.partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def CompareHypotheses(
        self,
        hypothesis1: _baml.types.Hypothesis,hypothesis2: _baml.types.Hypothesis,comparison_criteria: List[str],debate_context: Optional[str],
        baml_options: _baml.BamlCallOptions = {},
    ) -> baml_py.BamlStream[_baml.partial_types.ComparisonResult, _baml.types.ComparisonResult]:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = self.__runtime.stream_function(
        "CompareHypotheses",
        {
          "hypothesis1": hypothesis1,
          "hypothesis2": hypothesis2,
          "comparison_criteria": comparison_criteria,
          "debate_context": debate_context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
        env,
      )

      return baml_py.BamlStream[_baml.partial_types.ComparisonResult, _baml.types.ComparisonResult](
        raw,
        lambda x: cast(_baml.partial_types.ComparisonResult, x.cast_to(_baml.types, _baml.types, _baml.partial_types, True)),
        lambda x: cast(_baml.types.ComparisonResult, x.cast_to(_baml.types, _baml.types, _baml.partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def EnhanceHypothesis(
        self,
        original_hypothesis: _baml.types.Hypothesis,enhancement_strategy: str,feedback: Optional[List[str]],complementary_hypothesis: Optional[_baml.types.Hypothesis],
        baml_options: _baml.BamlCallOptions = {},
    ) -> baml_py.BamlStream[_baml.partial_types.Hypothesis, _baml.types.Hypothesis]:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = self.__runtime.stream_function(
        "EnhanceHypothesis",
        {
          "original_hypothesis": original_hypothesis,
          "enhancement_strategy": enhancement_strategy,
          "feedback": feedback,
          "complementary_hypothesis": complementary_hypothesis,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
        env,
      )

      return baml_py.BamlStream[_baml.partial_types.Hypothesis, _baml.types.Hypothesis](
        raw,
        lambda x: cast(_baml.partial_types.Hypothesis, x.cast_to(_baml.types, _baml.types, _baml.partial_types, True)),
        lambda x: cast(_baml.types.Hypothesis, x.cast_to(_baml.types, _baml.types, _baml.partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def EvaluateHypothesis(
        self,
        hypothesis: _baml.types.Hypothesis,review_type: _baml.types.ReviewType,evaluation_criteria: List[str],context: Optional[Dict[str, str]],
        baml_options: _baml.BamlCallOptions = {},
    ) -> baml_py.BamlStream[_baml.partial_types.Review, _baml.types.Review]:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = self.__runtime.stream_function(
        "EvaluateHypothesis",
        {
          "hypothesis": hypothesis,
          "review_type": review_type,
          "evaluation_criteria": evaluation_criteria,
          "context": context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
        env,
      )

      return baml_py.BamlStream[_baml.partial_types.Review, _baml.types.Review](
        raw,
        lambda x: cast(_baml.partial_types.Review, x.cast_to(_baml.types, _baml.types, _baml.partial_types, True)),
        lambda x: cast(_baml.types.Review, x.cast_to(_baml.types, _baml.types, _baml.partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractResearchPatterns(
        self,
        hypotheses: List[_baml.types.Hypothesis],reviews: List[_baml.types.Review],focus: str,
        baml_options: _baml.BamlCallOptions = {},
    ) -> baml_py.BamlStream[_baml.partial_types.ResearchPatterns, _baml.types.ResearchPatterns]:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = self.__runtime.stream_function(
        "ExtractResearchPatterns",
        {
          "hypotheses": hypotheses,
          "reviews": reviews,
          "focus": focus,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
        env,
      )

      return baml_py.BamlStream[_baml.partial_types.ResearchPatterns, _baml.types.ResearchPatterns](
        raw,
        lambda x: cast(_baml.partial_types.ResearchPatterns, x.cast_to(_baml.types, _baml.types, _baml.partial_types, True)),
        lambda x: cast(_baml.types.ResearchPatterns, x.cast_to(_baml.types, _baml.types, _baml.partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateHypothesis(
        self,
        goal: str,constraints: List[str],existing_hypotheses: List[_baml.types.Hypothesis],focus_area: Optional[str],generation_method: str,
        baml_options: _baml.BamlCallOptions = {},
    ) -> baml_py.BamlStream[_baml.partial_types.Hypothesis, _baml.types.Hypothesis]:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = self.__runtime.stream_function(
        "GenerateHypothesis",
        {
          "goal": goal,
          "constraints": constraints,
          "existing_hypotheses": existing_hypotheses,
          "focus_area": focus_area,
          "generation_method": generation_method,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
        env,
      )

      return baml_py.BamlStream[_baml.partial_types.Hypothesis, _baml.types.Hypothesis](
        raw,
        lambda x: cast(_baml.partial_types.Hypothesis, x.cast_to(_baml.types, _baml.types, _baml.partial_types, True)),
        lambda x: cast(_baml.types.Hypothesis, x.cast_to(_baml.types, _baml.types, _baml.partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ParseResearchGoal(
        self,
        natural_language_goal: str,domain_context: Optional[str],
        baml_options: _baml.BamlCallOptions = {},
    ) -> baml_py.BamlStream[_baml.partial_types.ParsedResearchGoal, _baml.types.ParsedResearchGoal]:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = self.__runtime.stream_function(
        "ParseResearchGoal",
        {
          "natural_language_goal": natural_language_goal,
          "domain_context": domain_context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
        env,
      )

      return baml_py.BamlStream[_baml.partial_types.ParsedResearchGoal, _baml.types.ParsedResearchGoal](
        raw,
        lambda x: cast(_baml.partial_types.ParsedResearchGoal, x.cast_to(_baml.types, _baml.types, _baml.partial_types, True)),
        lambda x: cast(_baml.types.ParsedResearchGoal, x.cast_to(_baml.types, _baml.types, _baml.partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def PerformSafetyCheck(
        self,
        target_type: str,target_content: str,trust_level: str,safety_criteria: List[str],
        baml_options: _baml.BamlCallOptions = {},
    ) -> baml_py.BamlStream[_baml.partial_types.SafetyCheck, _baml.types.SafetyCheck]:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = self.__runtime.stream_function(
        "PerformSafetyCheck",
        {
          "target_type": target_type,
          "target_content": target_content,
          "trust_level": trust_level,
          "safety_criteria": safety_criteria,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
        env,
      )

      return baml_py.BamlStream[_baml.partial_types.SafetyCheck, _baml.types.SafetyCheck](
        raw,
        lambda x: cast(_baml.partial_types.SafetyCheck, x.cast_to(_baml.types, _baml.types, _baml.partial_types, True)),
        lambda x: cast(_baml.types.SafetyCheck, x.cast_to(_baml.types, _baml.types, _baml.partial_types, False)),
        self.__ctx_manager.get(),
      )
    


b = BamlAsyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)

__all__ = ["b", "BamlCallOptions"]