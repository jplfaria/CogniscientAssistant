###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Dict, List, Optional, Union
from typing_extensions import Literal

import baml_py

from . import _baml


class AsyncHttpRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    async def CalculateSimilarity(
        self,
        hypothesis1: _baml.types.Hypothesis,hypothesis2: _baml.types.Hypothesis,similarity_aspects: List[str],
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      return await self.__runtime.build_request(
        "CalculateSimilarity",
        {
          "hypothesis1": hypothesis1,
          "hypothesis2": hypothesis2,
          "similarity_aspects": similarity_aspects,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
        False,
      )
    
    async def CompareHypotheses(
        self,
        hypothesis1: _baml.types.Hypothesis,hypothesis2: _baml.types.Hypothesis,comparison_criteria: List[str],debate_context: Optional[str],
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      return await self.__runtime.build_request(
        "CompareHypotheses",
        {
          "hypothesis1": hypothesis1,
          "hypothesis2": hypothesis2,
          "comparison_criteria": comparison_criteria,
          "debate_context": debate_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
        False,
      )
    
    async def EnhanceHypothesis(
        self,
        original_hypothesis: _baml.types.Hypothesis,enhancement_strategy: str,feedback: Optional[List[str]],complementary_hypothesis: Optional[_baml.types.Hypothesis],
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      return await self.__runtime.build_request(
        "EnhanceHypothesis",
        {
          "original_hypothesis": original_hypothesis,
          "enhancement_strategy": enhancement_strategy,
          "feedback": feedback,
          "complementary_hypothesis": complementary_hypothesis,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
        False,
      )
    
    async def EvaluateHypothesis(
        self,
        hypothesis: _baml.types.Hypothesis,review_type: _baml.types.ReviewType,evaluation_criteria: List[str],context: Optional[Dict[str, str]],
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      return await self.__runtime.build_request(
        "EvaluateHypothesis",
        {
          "hypothesis": hypothesis,
          "review_type": review_type,
          "evaluation_criteria": evaluation_criteria,
          "context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
        False,
      )
    
    async def ExtractResearchPatterns(
        self,
        hypotheses: List[_baml.types.Hypothesis],reviews: List[_baml.types.Review],focus: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      return await self.__runtime.build_request(
        "ExtractResearchPatterns",
        {
          "hypotheses": hypotheses,
          "reviews": reviews,
          "focus": focus,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
        False,
      )
    
    async def GenerateHypothesis(
        self,
        goal: str,constraints: List[str],existing_hypotheses: List[_baml.types.Hypothesis],focus_area: Optional[str],generation_method: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      return await self.__runtime.build_request(
        "GenerateHypothesis",
        {
          "goal": goal,
          "constraints": constraints,
          "existing_hypotheses": existing_hypotheses,
          "focus_area": focus_area,
          "generation_method": generation_method,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
        False,
      )
    
    async def ParseResearchGoal(
        self,
        natural_language_goal: str,domain_context: Optional[str],
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      return await self.__runtime.build_request(
        "ParseResearchGoal",
        {
          "natural_language_goal": natural_language_goal,
          "domain_context": domain_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
        False,
      )
    
    async def PerformSafetyCheck(
        self,
        target_type: str,target_content: str,trust_level: str,safety_criteria: List[str],
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      return await self.__runtime.build_request(
        "PerformSafetyCheck",
        {
          "target_type": target_type,
          "target_content": target_content,
          "trust_level": trust_level,
          "safety_criteria": safety_criteria,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
        False,
      )
    


class AsyncHttpStreamRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    async def CalculateSimilarity(
        self,
        hypothesis1: _baml.types.Hypothesis,hypothesis2: _baml.types.Hypothesis,similarity_aspects: List[str],
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      return await self.__runtime.build_request(
        "CalculateSimilarity",
        {
          "hypothesis1": hypothesis1,
          "hypothesis2": hypothesis2,
          "similarity_aspects": similarity_aspects,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
        True,
      )
    
    async def CompareHypotheses(
        self,
        hypothesis1: _baml.types.Hypothesis,hypothesis2: _baml.types.Hypothesis,comparison_criteria: List[str],debate_context: Optional[str],
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      return await self.__runtime.build_request(
        "CompareHypotheses",
        {
          "hypothesis1": hypothesis1,
          "hypothesis2": hypothesis2,
          "comparison_criteria": comparison_criteria,
          "debate_context": debate_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
        True,
      )
    
    async def EnhanceHypothesis(
        self,
        original_hypothesis: _baml.types.Hypothesis,enhancement_strategy: str,feedback: Optional[List[str]],complementary_hypothesis: Optional[_baml.types.Hypothesis],
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      return await self.__runtime.build_request(
        "EnhanceHypothesis",
        {
          "original_hypothesis": original_hypothesis,
          "enhancement_strategy": enhancement_strategy,
          "feedback": feedback,
          "complementary_hypothesis": complementary_hypothesis,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
        True,
      )
    
    async def EvaluateHypothesis(
        self,
        hypothesis: _baml.types.Hypothesis,review_type: _baml.types.ReviewType,evaluation_criteria: List[str],context: Optional[Dict[str, str]],
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      return await self.__runtime.build_request(
        "EvaluateHypothesis",
        {
          "hypothesis": hypothesis,
          "review_type": review_type,
          "evaluation_criteria": evaluation_criteria,
          "context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
        True,
      )
    
    async def ExtractResearchPatterns(
        self,
        hypotheses: List[_baml.types.Hypothesis],reviews: List[_baml.types.Review],focus: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      return await self.__runtime.build_request(
        "ExtractResearchPatterns",
        {
          "hypotheses": hypotheses,
          "reviews": reviews,
          "focus": focus,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
        True,
      )
    
    async def GenerateHypothesis(
        self,
        goal: str,constraints: List[str],existing_hypotheses: List[_baml.types.Hypothesis],focus_area: Optional[str],generation_method: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      return await self.__runtime.build_request(
        "GenerateHypothesis",
        {
          "goal": goal,
          "constraints": constraints,
          "existing_hypotheses": existing_hypotheses,
          "focus_area": focus_area,
          "generation_method": generation_method,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
        True,
      )
    
    async def ParseResearchGoal(
        self,
        natural_language_goal: str,domain_context: Optional[str],
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      return await self.__runtime.build_request(
        "ParseResearchGoal",
        {
          "natural_language_goal": natural_language_goal,
          "domain_context": domain_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
        True,
      )
    
    async def PerformSafetyCheck(
        self,
        target_type: str,target_content: str,trust_level: str,safety_criteria: List[str],
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      return await self.__runtime.build_request(
        "PerformSafetyCheck",
        {
          "target_type": target_type,
          "target_content": target_content,
          "trust_level": trust_level,
          "safety_criteria": safety_criteria,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
        True,
      )
    


__all__ = ["AsyncHttpRequest", "AsyncHttpStreamRequest"]