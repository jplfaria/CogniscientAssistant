###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum

from pydantic import BaseModel, ConfigDict

from typing_extensions import TypeAlias, Literal
from typing import Dict, Generic, List, Optional, TypeVar, Union

from . import types
from .types import Checked, Check

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################

T = TypeVar('T')
class StreamState(BaseModel, Generic[T]):
    value: T
    state: Literal["Pending", "Incomplete", "Complete"]


class AgentRequest(BaseModel):
    request_id: Optional[str] = None
    agent_type: Optional[types.AgentType] = None
    request_type: Optional[types.RequestType] = None
    content: Optional["RequestContent"] = None

class AgentResponse(BaseModel):
    request_id: Optional[str] = None
    status: Optional[types.ResponseStatus] = None
    response: Optional["ResponseData"] = None
    error: Optional["ErrorInfo"] = None

class AssumptionDecomposition(BaseModel):
    assumption: Optional[str] = None
    validity: Optional[str] = None
    evidence: Optional[str] = None
    criticality: Optional[str] = None

class Citation(BaseModel):
    authors: List[str]
    title: Optional[str] = None
    journal: Optional[str] = None
    year: Optional[int] = None
    doi: Optional[str] = None
    url: Optional[str] = None

class ComparisonResult(BaseModel):
    winner_id: Optional[str] = None
    confidence: Optional[float] = None
    reasoning: Optional[str] = None
    strengths_h1: List[str]
    strengths_h2: List[str]
    decisive_factors: List[str]

class ErrorInfo(BaseModel):
    code: Optional[str] = None
    message: Optional[str] = None
    recoverable: Optional[bool] = None

class ExperimentalProtocol(BaseModel):
    objective: Optional[str] = None
    methodology: Optional[str] = None
    required_resources: List[str]
    timeline: Optional[str] = None
    success_metrics: List[str]
    potential_challenges: List[str]
    safety_considerations: List[str]

class FailurePoint(BaseModel):
    step: Optional[str] = None
    probability: Optional[float] = None
    impact: Optional[str] = None

class Hypothesis(BaseModel):
    id: Optional[str] = None
    summary: Optional[str] = None
    category: Optional[str] = None
    full_description: Optional[str] = None
    novelty_claim: Optional[str] = None
    assumptions: List[str]
    experimental_protocol: Optional["ExperimentalProtocol"] = None
    supporting_evidence: List["Citation"]
    confidence_score: Optional[float] = None
    generation_method: Optional[str] = None
    created_at: Optional[str] = None
    elo_rating: Optional[float] = None
    review_count: Optional[int] = None
    evolution_count: Optional[int] = None

class HypothesisSummary(BaseModel):
    core_idea: Optional[str] = None
    scientific_impact: Optional[str] = None
    feasibility_assessment: Optional[str] = None
    next_steps: List[str]

class ParsedResearchGoal(BaseModel):
    primary_objective: Optional[str] = None
    sub_objectives: List[str]
    implied_constraints: List[str]
    suggested_categories: List[str]
    key_terms: List[str]
    success_criteria: List[str]

class RequestContent(BaseModel):
    prompt: Optional[str] = None
    context: Dict[str, Optional[str]]
    parameters: Dict[str, Optional[str]]

class ResearchPatterns(BaseModel):
    identified_patterns: List[str]
    common_strengths: List[str]
    common_weaknesses: List[str]
    emerging_themes: List[str]
    recommendations: List[str]
    synthesis_summary: Optional[str] = None

class ResponseData(BaseModel):
    content: Optional[str] = None
    metadata: Dict[str, Optional[str]]

class Review(BaseModel):
    id: Optional[str] = None
    hypothesis_id: Optional[str] = None
    reviewer_agent_id: Optional[str] = None
    review_type: Optional[types.ReviewType] = None
    decision: Optional[types.ReviewDecision] = None
    scores: Optional["ReviewScores"] = None
    narrative_feedback: Optional[str] = None
    key_strengths: List[str]
    key_weaknesses: List[str]
    improvement_suggestions: List[str]
    confidence_level: Optional[str] = None
    assumption_decomposition: Optional[List["AssumptionDecomposition"]] = None
    simulation_results: Optional["SimulationResults"] = None
    literature_citations: Optional[List["Citation"]] = None
    created_at: Optional[str] = None
    time_spent_seconds: Optional[float] = None

class ReviewScores(BaseModel):
    correctness: Optional[float] = None
    quality: Optional[float] = None
    novelty: Optional[float] = None
    safety: Optional[float] = None
    feasibility: Optional[float] = None

class SafetyCheck(BaseModel):
    id: Optional[str] = None
    target_type: Optional[str] = None
    target_id: Optional[str] = None
    safety_level: Optional[types.SafetyLevel] = None
    passed: Optional[bool] = None
    checks_performed: List[str]
    violations: Optional[List[str]] = None
    recommendations: Optional[List[str]] = None
    category: Optional[types.SafetyCategory] = None
    timestamp: Optional[str] = None
    metadata: Optional[Dict[str, Optional[str]]] = None

class SimilarityScore(BaseModel):
    overall_similarity: Optional[float] = None
    aspect_scores: Dict[str, Optional[float]]
    shared_concepts: List[str]
    key_differences: List[str]

class SimulationResults(BaseModel):
    mechanism_steps: List[str]
    failure_points: List["FailurePoint"]
    predicted_outcomes: List[str]

class Task(BaseModel):
    id: Optional[str] = None
    task_type: Optional[types.TaskType] = None
    priority: Optional[int] = None
    state: Optional[types.TaskState] = None
    payload: Dict[str, Optional[str]]
    assigned_to: Optional[str] = None
    result: Optional[Dict[str, Optional[str]]] = None
    error: Optional[str] = None
    created_at: Optional[str] = None
    assigned_at: Optional[str] = None
    completed_at: Optional[str] = None
