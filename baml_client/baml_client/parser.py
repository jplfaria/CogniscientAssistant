# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions

import baml_py

from . import stream_types, types
from .runtime import DoNotUseDirectlyCallManager, BamlCallOptions

class LlmResponseParser:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def CalculateSimilarity(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.SimilarityScore:
        result = self.__options.merge_options(baml_options).parse_response(function_name="CalculateSimilarity", llm_response=llm_response, mode="request")
        return typing.cast(types.SimilarityScore, result)

    def CompareHypotheses(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ComparisonResult:
        result = self.__options.merge_options(baml_options).parse_response(function_name="CompareHypotheses", llm_response=llm_response, mode="request")
        return typing.cast(types.ComparisonResult, result)

    def EnhanceHypothesis(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.Hypothesis:
        result = self.__options.merge_options(baml_options).parse_response(function_name="EnhanceHypothesis", llm_response=llm_response, mode="request")
        return typing.cast(types.Hypothesis, result)

    def EvaluateHypothesis(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.Review:
        result = self.__options.merge_options(baml_options).parse_response(function_name="EvaluateHypothesis", llm_response=llm_response, mode="request")
        return typing.cast(types.Review, result)

    def ExtractResearchPatterns(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ResearchPatterns:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ExtractResearchPatterns", llm_response=llm_response, mode="request")
        return typing.cast(types.ResearchPatterns, result)

    def GenerateHypothesis(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.Hypothesis:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateHypothesis", llm_response=llm_response, mode="request")
        return typing.cast(types.Hypothesis, result)

    def ParseResearchGoal(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ParsedResearchGoal:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ParseResearchGoal", llm_response=llm_response, mode="request")
        return typing.cast(types.ParsedResearchGoal, result)

    def PerformSafetyCheck(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.SafetyCheck:
        result = self.__options.merge_options(baml_options).parse_response(function_name="PerformSafetyCheck", llm_response=llm_response, mode="request")
        return typing.cast(types.SafetyCheck, result)

    

class LlmStreamParser:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def CalculateSimilarity(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.SimilarityScore:
        result = self.__options.merge_options(baml_options).parse_response(function_name="CalculateSimilarity", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.SimilarityScore, result)

    def CompareHypotheses(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ComparisonResult:
        result = self.__options.merge_options(baml_options).parse_response(function_name="CompareHypotheses", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ComparisonResult, result)

    def EnhanceHypothesis(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.Hypothesis:
        result = self.__options.merge_options(baml_options).parse_response(function_name="EnhanceHypothesis", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.Hypothesis, result)

    def EvaluateHypothesis(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.Review:
        result = self.__options.merge_options(baml_options).parse_response(function_name="EvaluateHypothesis", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.Review, result)

    def ExtractResearchPatterns(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ResearchPatterns:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ExtractResearchPatterns", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ResearchPatterns, result)

    def GenerateHypothesis(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.Hypothesis:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateHypothesis", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.Hypothesis, result)

    def ParseResearchGoal(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ParsedResearchGoal:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ParseResearchGoal", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ParsedResearchGoal, result)

    def PerformSafetyCheck(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.SafetyCheck:
        result = self.__options.merge_options(baml_options).parse_response(function_name="PerformSafetyCheck", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.SafetyCheck, result)

    