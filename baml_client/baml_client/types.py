# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (13)
# #########################################################################

class AgentType(str, Enum):
    Generation = "Generation"
    Reflection = "Reflection"
    Ranking = "Ranking"
    Evolution = "Evolution"
    Proximity = "Proximity"
    MetaReview = "MetaReview"
    Supervisor = "Supervisor"

class ConfidenceLevel(str, Enum):
    High = "High"
    Medium = "Medium"
    Low = "Low"

class Criticality(str, Enum):
    Fundamental = "Fundamental"
    Peripheral = "Peripheral"

class HypothesisCategory(str, Enum):
    Mechanistic = "Mechanistic"
    Therapeutic = "Therapeutic"
    Diagnostic = "Diagnostic"
    Biomarker = "Biomarker"
    Methodology = "Methodology"
    Other = "Other"

class RequestType(str, Enum):
    Generate = "Generate"
    Analyze = "Analyze"
    Evaluate = "Evaluate"
    Compare = "Compare"

class ResponseStatus(str, Enum):
    Success = "Success"
    Error = "Error"
    Partial = "Partial"

class ReviewDecision(str, Enum):
    Accept = "Accept"
    Reject = "Reject"
    Revise = "Revise"

class ReviewType(str, Enum):
    Initial = "Initial"
    Full = "Full"
    DeepVerification = "DeepVerification"
    Observation = "Observation"
    Simulation = "Simulation"
    Tournament = "Tournament"

class SafetyCategory(str, Enum):
    ContentSafety = "ContentSafety"
    GoalViolation = "GoalViolation"
    EthicalConcern = "EthicalConcern"
    ResourceMisuse = "ResourceMisuse"

class SafetyLevel(str, Enum):
    Safe = "Safe"
    Concerning = "Concerning"
    Blocked = "Blocked"

class TaskState(str, Enum):
    Pending = "Pending"
    Assigned = "Assigned"
    Executing = "Executing"
    Completed = "Completed"
    Failed = "Failed"

class TaskType(str, Enum):
    GenerateHypothesis = "GenerateHypothesis"
    ReflectOnHypothesis = "ReflectOnHypothesis"
    RankHypotheses = "RankHypotheses"
    EvolveHypothesis = "EvolveHypothesis"
    FindSimilarHypotheses = "FindSimilarHypotheses"
    MetaReview = "MetaReview"

class Validity(str, Enum):
    Valid = "Valid"
    Questionable = "Questionable"
    Invalid = "Invalid"

# #########################################################################
# Generated classes (20)
# #########################################################################

class AgentRequest(BaseModel):
    request_id: str
    agent_type: AgentType
    request_type: RequestType
    content: "RequestContent"

class AgentResponse(BaseModel):
    request_id: str
    status: ResponseStatus
    response: typing.Optional["ResponseData"] = None
    error: typing.Optional["ErrorInfo"] = None

class AssumptionDecomposition(BaseModel):
    assumption: str
    validity: str
    evidence: str
    criticality: str

class Citation(BaseModel):
    authors: typing.List[str]
    title: str
    journal: typing.Optional[str] = None
    year: int
    doi: typing.Optional[str] = None
    url: typing.Optional[str] = None

class ComparisonResult(BaseModel):
    winner_id: str
    confidence: float
    reasoning: str
    strengths_h1: typing.List[str]
    strengths_h2: typing.List[str]
    decisive_factors: typing.List[str]

class ErrorInfo(BaseModel):
    code: str
    message: str
    recoverable: bool

class ExperimentalProtocol(BaseModel):
    objective: str
    methodology: str
    required_resources: typing.List[str]
    timeline: str
    success_metrics: typing.List[str]
    potential_challenges: typing.List[str]
    safety_considerations: typing.List[str]

class FailurePoint(BaseModel):
    step: str
    probability: float
    impact: str

class Hypothesis(BaseModel):
    id: str
    summary: str
    category: str
    full_description: str
    novelty_claim: str
    assumptions: typing.List[str]
    reasoning: str
    experimental_protocol: "ExperimentalProtocol"
    supporting_evidence: typing.List["Citation"]
    confidence_score: float
    generation_method: str
    created_at: str
    elo_rating: typing.Optional[float] = None
    review_count: typing.Optional[int] = None
    evolution_count: typing.Optional[int] = None

class HypothesisSummary(BaseModel):
    core_idea: str
    scientific_impact: str
    feasibility_assessment: str
    next_steps: typing.List[str]

class ParsedResearchGoal(BaseModel):
    primary_objective: str
    sub_objectives: typing.List[str]
    implied_constraints: typing.List[str]
    suggested_categories: typing.List[str]
    key_terms: typing.List[str]
    success_criteria: typing.List[str]

class RequestContent(BaseModel):
    prompt: str
    context: typing.Dict[str, str]
    parameters: typing.Dict[str, str]

class ResearchPatterns(BaseModel):
    identified_patterns: typing.List[str]
    common_strengths: typing.List[str]
    common_weaknesses: typing.List[str]
    emerging_themes: typing.List[str]
    recommendations: typing.List[str]
    synthesis_summary: str

class ResponseData(BaseModel):
    content: str
    metadata: typing.Dict[str, str]

class Review(BaseModel):
    id: str
    hypothesis_id: str
    reviewer_agent_id: str
    review_type: ReviewType
    decision: ReviewDecision
    scores: "ReviewScores"
    narrative_feedback: str
    key_strengths: typing.List[str]
    key_weaknesses: typing.List[str]
    improvement_suggestions: typing.List[str]
    confidence_level: str
    assumption_decomposition: typing.Optional[typing.List["AssumptionDecomposition"]] = None
    simulation_results: typing.Optional["SimulationResults"] = None
    literature_citations: typing.Optional[typing.List["Citation"]] = None
    created_at: str
    time_spent_seconds: typing.Optional[float] = None

class ReviewScores(BaseModel):
    correctness: float
    quality: float
    novelty: float
    safety: float
    feasibility: float

class SafetyCheck(BaseModel):
    id: str
    target_type: str
    target_id: str
    safety_level: SafetyLevel
    passed: bool
    checks_performed: typing.List[str]
    violations: typing.Optional[typing.List[str]] = None
    recommendations: typing.Optional[typing.List[str]] = None
    category: typing.Optional[SafetyCategory] = None
    timestamp: str
    metadata: typing.Optional[typing.Dict[str, str]] = None

class SimilarityScore(BaseModel):
    overall_similarity: float
    aspect_scores: typing.Dict[str, float]
    shared_concepts: typing.List[str]
    key_differences: typing.List[str]

class SimulationResults(BaseModel):
    mechanism_steps: typing.List[str]
    failure_points: typing.List["FailurePoint"]
    predicted_outcomes: typing.List[str]

class Task(BaseModel):
    id: str
    task_type: TaskType
    priority: int
    state: TaskState
    payload: typing.Dict[str, str]
    assigned_to: typing.Optional[str] = None
    result: typing.Optional[typing.Dict[str, str]] = None
    error: typing.Optional[str] = None
    created_at: str
    assigned_at: typing.Optional[str] = None
    completed_at: typing.Optional[str] = None

# #########################################################################
# Generated type aliases (0)
# #########################################################################
