# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from pydantic import BaseModel, ConfigDict

import baml_py

from . import types

StreamStateValueT = typing.TypeVar('StreamStateValueT')
class StreamState(BaseModel, typing.Generic[StreamStateValueT]):
    value: StreamStateValueT
    state: typing_extensions.Literal["Pending", "Incomplete", "Complete"]
# #########################################################################
# Generated classes (20)
# #########################################################################

class AgentRequest(BaseModel):
    request_id: typing.Optional[str] = None
    agent_type: typing.Optional[types.AgentType] = None
    request_type: typing.Optional[types.RequestType] = None
    content: typing.Optional["RequestContent"] = None

class AgentResponse(BaseModel):
    request_id: typing.Optional[str] = None
    status: typing.Optional[types.ResponseStatus] = None
    response: typing.Optional["ResponseData"] = None
    error: typing.Optional["ErrorInfo"] = None

class AssumptionDecomposition(BaseModel):
    assumption: typing.Optional[str] = None
    validity: typing.Optional[str] = None
    evidence: typing.Optional[str] = None
    criticality: typing.Optional[str] = None

class Citation(BaseModel):
    authors: typing.List[str]
    title: typing.Optional[str] = None
    journal: typing.Optional[str] = None
    year: typing.Optional[int] = None
    doi: typing.Optional[str] = None
    url: typing.Optional[str] = None

class ComparisonResult(BaseModel):
    winner_id: typing.Optional[str] = None
    confidence: typing.Optional[float] = None
    reasoning: typing.Optional[str] = None
    strengths_h1: typing.List[str]
    strengths_h2: typing.List[str]
    decisive_factors: typing.List[str]

class ErrorInfo(BaseModel):
    code: typing.Optional[str] = None
    message: typing.Optional[str] = None
    recoverable: typing.Optional[bool] = None

class ExperimentalProtocol(BaseModel):
    objective: typing.Optional[str] = None
    methodology: typing.Optional[str] = None
    required_resources: typing.List[str]
    timeline: typing.Optional[str] = None
    success_metrics: typing.List[str]
    potential_challenges: typing.List[str]
    safety_considerations: typing.List[str]

class FailurePoint(BaseModel):
    step: typing.Optional[str] = None
    probability: typing.Optional[float] = None
    impact: typing.Optional[str] = None

class Hypothesis(BaseModel):
    id: typing.Optional[str] = None
    summary: typing.Optional[str] = None
    category: typing.Optional[str] = None
    full_description: typing.Optional[str] = None
    novelty_claim: typing.Optional[str] = None
    assumptions: typing.List[str]
    reasoning: typing.Optional[str] = None
    experimental_protocol: typing.Optional["ExperimentalProtocol"] = None
    supporting_evidence: typing.List["Citation"]
    confidence_score: typing.Optional[float] = None
    generation_method: typing.Optional[str] = None
    created_at: typing.Optional[str] = None
    elo_rating: typing.Optional[float] = None
    review_count: typing.Optional[int] = None
    evolution_count: typing.Optional[int] = None

class HypothesisSummary(BaseModel):
    core_idea: typing.Optional[str] = None
    scientific_impact: typing.Optional[str] = None
    feasibility_assessment: typing.Optional[str] = None
    next_steps: typing.List[str]

class ParsedResearchGoal(BaseModel):
    primary_objective: typing.Optional[str] = None
    sub_objectives: typing.List[str]
    implied_constraints: typing.List[str]
    suggested_categories: typing.List[str]
    key_terms: typing.List[str]
    success_criteria: typing.List[str]

class RequestContent(BaseModel):
    prompt: typing.Optional[str] = None
    context: typing.Dict[str, str]
    parameters: typing.Dict[str, str]

class ResearchPatterns(BaseModel):
    identified_patterns: typing.List[str]
    common_strengths: typing.List[str]
    common_weaknesses: typing.List[str]
    emerging_themes: typing.List[str]
    recommendations: typing.List[str]
    synthesis_summary: typing.Optional[str] = None

class ResponseData(BaseModel):
    content: typing.Optional[str] = None
    metadata: typing.Dict[str, str]

class Review(BaseModel):
    id: typing.Optional[str] = None
    hypothesis_id: typing.Optional[str] = None
    reviewer_agent_id: typing.Optional[str] = None
    review_type: typing.Optional[types.ReviewType] = None
    decision: typing.Optional[types.ReviewDecision] = None
    scores: typing.Optional["ReviewScores"] = None
    narrative_feedback: typing.Optional[str] = None
    key_strengths: typing.List[str]
    key_weaknesses: typing.List[str]
    improvement_suggestions: typing.List[str]
    confidence_level: typing.Optional[str] = None
    assumption_decomposition: typing.Optional[typing.List["AssumptionDecomposition"]] = None
    simulation_results: typing.Optional["SimulationResults"] = None
    literature_citations: typing.Optional[typing.List["Citation"]] = None
    created_at: typing.Optional[str] = None
    time_spent_seconds: typing.Optional[float] = None

class ReviewScores(BaseModel):
    correctness: typing.Optional[float] = None
    quality: typing.Optional[float] = None
    novelty: typing.Optional[float] = None
    safety: typing.Optional[float] = None
    feasibility: typing.Optional[float] = None

class SafetyCheck(BaseModel):
    id: typing.Optional[str] = None
    target_type: typing.Optional[str] = None
    target_id: typing.Optional[str] = None
    safety_level: typing.Optional[types.SafetyLevel] = None
    passed: typing.Optional[bool] = None
    checks_performed: typing.List[str]
    violations: typing.Optional[typing.List[str]] = None
    recommendations: typing.Optional[typing.List[str]] = None
    category: typing.Optional[types.SafetyCategory] = None
    timestamp: typing.Optional[str] = None
    metadata: typing.Optional[typing.Dict[str, str]] = None

class SimilarityScore(BaseModel):
    overall_similarity: typing.Optional[float] = None
    aspect_scores: typing.Dict[str, float]
    shared_concepts: typing.List[str]
    key_differences: typing.List[str]

class SimulationResults(BaseModel):
    mechanism_steps: typing.List[str]
    failure_points: typing.List["FailurePoint"]
    predicted_outcomes: typing.List[str]

class Task(BaseModel):
    id: typing.Optional[str] = None
    task_type: typing.Optional[types.TaskType] = None
    priority: typing.Optional[int] = None
    state: typing.Optional[types.TaskState] = None
    payload: typing.Dict[str, str]
    assigned_to: typing.Optional[str] = None
    result: typing.Optional[typing.Dict[str, str]] = None
    error: typing.Optional[str] = None
    created_at: typing.Optional[str] = None
    assigned_at: typing.Optional[str] = None
    completed_at: typing.Optional[str] = None

# #########################################################################
# Generated type aliases (0)
# #########################################################################
