[project]
name = "ai-coscientist"
version = "0.1.0"
description = "AI Co-Scientist: Collaborative AI system for scientific hypothesis generation"
authors = [{name = "AI Co-Scientist Team"}]
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}

dependencies = [
    "pydantic>=2.8.0,<3.0",
    # "asyncio",  # REMOVED - asyncio is built into Python
    "aiofiles>=24.1.0,<25.0",
    "httpx>=0.27.0,<1.0",
    "python-dotenv>=1.0.0,<2.0",
    "structlog>=24.1.0,<25.0",
    "rich>=13.7.0,<14.0",
    "typer>=0.12.0,<1.0",
    "baml-py>=0.209.0,<1.0",  # Major upgrade: baml 0.19.1 -> baml-py 0.209.0 (huge feature jump!)
    "argo-proxy>=2.7.7,<3.0",  # Argo Gateway for LLM API access
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0,<9.0",
    "pytest-asyncio>=0.23.0,<1.0",
    "pytest-cov>=5.0.0,<6.0",
    "mypy>=1.11.0,<2.0",
    "ruff>=0.6.0,<1.0",
    "black>=24.8.0,<25.0",
    "pre-commit>=3.8.0,<4.0",
]

[project.scripts]
aicoscientist = "src.cli:main"

[build-system]
requires = ["setuptools>=75.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "unit: Unit tests for isolated components",
    "integration: Integration tests for system workflows",
    "slow: Tests that take significant time to run",
    "requires_llm: Tests that require LLM connectivity",
    "real_llm: Tests that use real LLM APIs"
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*", "*/__init__.py"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
fail_under = 80
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:"
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = []
fixable = ["ALL"]
unfixable = []
line-length = 100
target-version = "py311"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'